{
  "control": "MB-C12",
  "title": "Third-party Config Security",
  "rules": [
    {
      "id": "MB-R072",
      "title": "No secrets in VCS (working tree or git history)",
      "control": "MB-C12",
      "severity": "critical",
      "op": "all",
      "checks": [
        {
          "name": "webroot_hygiene",
          "args": {
            "webroot": ".",
            "forbidden": [".env", ".env.local", "*.pem", "*.key"]
          }
        },
        {
          "name": "git_history_scan",
          "args": {
            "paths": ["app", "env", "pub"],
            "patterns": [
              "AKIA[0-9A-Z]{16}",
              "ASIA[0-9A-Z]{16}",
              "AIza[0-9A-Za-z\\-_]{35}",
              "-----BEGIN( RSA)? PRIVATE KEY-----",
              "xox[baprs]-[0-9A-Za-z\\-]{10,48}",
              "sk_live_[0-9a-zA-Z]{24,}"
            ],
            "max_results": 20
          }
        }
      ],
      "messages": {
        "pass": "No secrets detected in the working tree or Git history.",
        "fail": "Secrets detected in files or Git history. Remove, rotate keys, and purge history with a secure rewrite."
      }
    },
    {
      "id": "MB-R073",
      "title": "HTTPS-only endpoints configured",
      "control": "MB-C12",
      "severity": "high",
      "op": "any",
      "checks": [
        {
          "name": "text_grep",
          "args": {
            "file": "app/etc/env.php",
            "must_not_match": ["http://"]
          }
        },
        {
          "name": "code_grep",
          "args": {
            "paths": ["app"],
            "include_ext": ["php", "phtml", "js", "html", "xml"],
            "must_not_match": ["http://[^\\s\"'>]+"]
          }
        }
      ],
      "messages": {
        "pass": "All configured endpoints use HTTPS (no http:// references).",
        "fail": "Insecure http:// endpoint references found. Switch to HTTPS."
      }
    },
    {
      "id": "MB-R074",
      "title": "Debug/verbose off for third-party integrations",
      "control": "MB-C12",
      "severity": "medium",
      "op": "all",
      "checks": [
        {
          "name": "php_array_eq",
          "args": {
            "file": "app/etc/env.php",
            "path": "system.default.dev/debug/debug_logging",
            "equals": 0
          }
        }
      ],
      "messages": {
        "pass": "Third-party debug/verbose logging is disabled.",
        "fail": "Third-party debug/verbose logging is enabled. Disable debug_logging in env.php."
      }
    },
    {
      "id": "MB-R075",
      "title": "Webhook signature validation present",
      "control": "MB-C12",
      "severity": "high",
      "op": "all",
      "checks": [
        {
          "name": "code_grep",
          "args": {
            "paths": ["app"],
            "include_ext": ["php"],
            "must_match": [
              "hash_hmac\\(|\\\\Stripe\\\\Webhook::constructEvent",
              "X-(?:Signature|Hub-Signature|Hub-Signature-256|Stripe-Signature|Shopify-Hmac-Sha256|Slack-Signature|Twilio-Signature|Line-Signature|Twitch-Eventsub-Message-Signature|Webhook-Signature)"
            ]
          }
        }
      ],
      "messages": {
        "pass": "Webhook handlers validate signatures (HMAC) from providers.",
        "fail": "Webhook signature validation not detected. Verify MAC using shared secret headers."
      }
    },
    {
      "id": "MB-R076",
      "title": "Outbound connections restricted by allow-list",
      "control": "MB-C12",
      "severity": "medium",
      "op": "all",
      "checks": [
        {
          "name": "code_grep",
          "args": {
            "paths": ["app"],
            "include_ext": ["php"],
            "must_match": [
              "allowed_hosts|allowlist|whitelist",
              "CURLOPT_(RESOLVE|CONNECTTIMEOUT|TIMEOUT)"
            ]
          }
        }
      ],
      "messages": {
        "pass": "Outbound HTTP requests are constrained by allowlists and sane timeouts.",
        "fail": "No allowlist or timeouts for outbound requests. Add domain allowlists and cURL timeouts."
      }
    },
    {
      "id": "MB-R077",
      "title": "PII minimization for third-party flows",
      "control": "MB-C12",
      "severity": "high",
      "op": "all",
      "checks": [
        {
          "name": "code_grep",
          "args": {
            "paths": ["app"],
            "include_ext": ["php"],
            "must_not_match": [
              "full_card",
              "cvv",
              "ssn",
              "passport_number"
            ]
          }
        }
      ],
      "messages": {
        "pass": "No direct handling of sensitive PII (e.g., full card, CVV, SSN, passport).",
        "fail": "Sensitive PII handling detected. Remove or tokenize via a PCI-compliant provider."
      }
    },
    {
      "id": "MB-R078",
      "title": "Strong TLS ciphers on upstream gateways",
      "control": "MB-C12",
      "severity": "medium",
      "op": "any",
      "checks": [
        {
          "name": "nginx_directive",
          "args": {
            "file": "nginx.conf",
            "directive": "ssl_ciphers\\s+.*(TLSv1\\.2|TLSv1\\.3|ECDHE)\\b",
            "expects_regex": true
          }
        },
        {
          "name": "apache_htaccess_directive",
          "args": {
            "file": "pub/.htaccess",
            "directive": "SSLCipherSuite\\s+",
            "expects_regex": true
          }
        }
      ],
      "messages": {
        "pass": "Web server enforces strong TLS ciphers (TLS 1.2/1.3, ECDHE).",
        "fail": "Weak or unspecified TLS ciphers. Configure strong cipher suites on the web server."
      }
    },
    {
      "id": "MB-R079",
      "title": "API keys stored in env.php (not in DB/plain code)",
      "control": "MB-C12",
      "severity": "high",
      "op": "any",
      "checks": [
        {
          "name": "php_array_key_search",
          "args": {
            "file": "app/etc/env.php",
            "key_regex": "(api_)?key|secret|token",
            "min_found": 1
          }
        },
        {
          "name": "code_grep",
          "args": {
            "paths": ["app"],
            "include_ext": ["php", "phtml", "xml"],
            "must_not_match": [
               "(?i)INSERT\\s+INTO\\s+.*\\bcore_config_data\\b.*\\b(path|value)\\b.*(api[_-]?key|secret|token)",
              "(?i)UPDATE\\s+\\bcore_config_data\\b.*\\b(path|value)\\b.*(api[_-]?key|secret|token)",
              "(?i)INSERT\\s+INTO\\s+.*(api[_-]?key|secret|token)",
              "(?i)update\\s+.*(api[_-]?key|secret|token)",
              "(?i)setData\\(\\s*['\\\"](?:payment\\/[^'\\\"]+\\/)?(api[_-]?key|secret|token)",
              "(?i)setValue\\(\\s*['\\\"](?:payment\\/[^'\\\"]+\\/)?(api[_-]?key|secret|token)",
              "(?i)save\\(\\)\\s*;\\s*\\/\\/.*(api[_-]?key|secret|token).*", 
              "(?i)Config\\s*\\(.*(api[_-]?key|secret|token).*\\)" 
            ]
          }
        }
      ],
      "messages": {
        "pass": "API credentials are stored in env.php, not embedded in code or the DB.",
        "fail": "API keys found in code or DB paths. Move secrets to env.php and rotate compromised keys."
      }
    },
    {
      "id": "MB-R080",
      "title": "Third-party logging sanitized (mask/redact)",
      "control": "MB-C12",
      "severity": "medium",
      "op": "all",
      "checks": [
        {
          "name": "code_grep",
          "args": {
            "paths": ["app"],
            "include_ext": ["php"],
            "must_match": [
              "mask|redact|sanitize|filter"
            ]
          }
        }
      ],
      "messages": {
        "pass": "Third-party logs apply masking/redaction for sensitive fields.",
        "fail": "Logs are not sanitized. Add masking or redaction for tokens, emails, and identifiers."
      }
    },
    {
      "id": "MB-R081",
      "title": "SaaS integrations scoped by ACL (least privilege/IP allowlist)",
      "control": "MB-C12",
      "severity": "low",
      "op": "any",
      "checks": [
        {
          "name": "text_grep",
          "args": {
            "file": "SECURITY.md",
            "must_match": [
              "least privilege|scope",
              "IP allowlist|CIDR"
            ]
          }
        },
        {
          "name": "text_grep",
          "args": {
            "file": "docs/integrations.md",
            "must_match": [
              "least privilege|scope",
              "IP allowlist|CIDR"
            ]
          }
        }
      ],
      "messages": {
        "pass": "Integration docs mention least-privilege scopes and optional IP allowlisting.",
        "fail": "No ACL/scoping guidance found. Document least-privilege permissions and IP allowlists."
      }
    }
  ]
}
